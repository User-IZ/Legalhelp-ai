
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  address: 'address',
  created_at: 'created_at',
  email: 'email',
  password: 'password',
  first_name: 'first_name',
  last_name: 'last_name',
  phone: 'phone',
  role: 'role',
  kyc_type: 'kyc_type',
  updated_at: 'updated_at',
  vkyc_completed: 'vkyc_completed',
  vkyc_completed_at: 'vkyc_completed_at',
  can_upload_reports: 'can_upload_reports'
};

exports.Prisma.AdvocateProfileScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  specialization: 'specialization',
  experience: 'experience',
  bio: 'bio',
  education: 'education',
  certifications: 'certifications',
  hourly_rate: 'hourly_rate',
  location: 'location',
  languages: 'languages',
  image_url: 'image_url',
  is_verified: 'is_verified',
  is_available: 'is_available',
  total_consultations: 'total_consultations',
  total_earnings: 'total_earnings',
  rating: 'rating',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  title: 'title',
  category: 'category',
  description: 'description',
  pdf_url: 'pdf_url',
  created_at: 'created_at',
  cloudinary_public_id: 'cloudinary_public_id',
  court: 'court',
  date: 'date',
  tags: 'tags',
  updated_at: 'updated_at'
};

exports.Prisma.VkycDocumentScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  document_type: 'document_type',
  document_url: 'document_url',
  kyc_type: 'kyc_type',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ConsultationRequestScalarFieldEnum = {
  id: 'id',
  client_id: 'client_id',
  advocate_id: 'advocate_id',
  title: 'title',
  description: 'description',
  consultation_type: 'consultation_type',
  status: 'status',
  amount: 'amount',
  scheduled_at: 'scheduled_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  request_id: 'request_id',
  client_id: 'client_id',
  advocate_id: 'advocate_id',
  amount: 'amount',
  stripe_payment_id: 'stripe_payment_id',
  stripe_session_id: 'stripe_session_id',
  status: 'status',
  payment_method: 'payment_method',
  processed_at: 'processed_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AccessGrantScalarFieldEnum = {
  id: 'id',
  request_id: 'request_id',
  user_id: 'user_id',
  granted_at: 'granted_at',
  expires_at: 'expires_at',
  is_active: 'is_active',
  created_at: 'created_at'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  request_id: 'request_id',
  sender_id: 'sender_id',
  receiver_id: 'receiver_id',
  message: 'message',
  message_type: 'message_type',
  is_read: 'is_read',
  created_at: 'created_at'
};

exports.Prisma.VideoCallScalarFieldEnum = {
  id: 'id',
  request_id: 'request_id',
  client_id: 'client_id',
  advocate_id: 'advocate_id',
  call_id: 'call_id',
  status: 'status',
  started_at: 'started_at',
  ended_at: 'ended_at',
  duration: 'duration',
  recording_url: 'recording_url',
  created_at: 'created_at'
};

exports.Prisma.MonthlyEarningsScalarFieldEnum = {
  id: 'id',
  advocate_id: 'advocate_id',
  year: 'year',
  month: 'month',
  total_amount: 'total_amount',
  consultation_count: 'consultation_count',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  REGULAR_USER: 'REGULAR_USER',
  BARRISTER: 'BARRISTER',
  LAWYER: 'LAWYER',
  GOVERNMENT_OFFICIAL: 'GOVERNMENT_OFFICIAL'
};

exports.KycType = exports.$Enums.KycType = {
  REGULAR: 'REGULAR',
  PROFESSIONAL: 'PROFESSIONAL'
};

exports.ConsultationType = exports.$Enums.ConsultationType = {
  VIDEO: 'VIDEO',
  CHAT: 'CHAT',
  BOTH: 'BOTH'
};

exports.RequestStatus = exports.$Enums.RequestStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

exports.MessageType = exports.$Enums.MessageType = {
  TEXT: 'TEXT',
  FILE: 'FILE',
  IMAGE: 'IMAGE'
};

exports.CallStatus = exports.$Enums.CallStatus = {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  ENDED: 'ENDED',
  FAILED: 'FAILED'
};

exports.Prisma.ModelName = {
  Profile: 'Profile',
  AdvocateProfile: 'AdvocateProfile',
  Report: 'Report',
  VkycDocument: 'VkycDocument',
  ConsultationRequest: 'ConsultationRequest',
  Payment: 'Payment',
  AccessGrant: 'AccessGrant',
  ChatMessage: 'ChatMessage',
  VideoCall: 'VideoCall',
  MonthlyEarnings: 'MonthlyEarnings'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
